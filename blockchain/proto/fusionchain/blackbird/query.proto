syntax = "proto3";
package fusionchain.blackbird;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "fusionchain/blackbird/params.proto";
import "fusionchain/blackbird/action.proto";
import "fusionchain/blackbird/policy.proto";

option go_package = "github.com/qredo/fusionchain/x/blackbird/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/fusionchain/blackbird/params";
  }
  // Queries a list of Verify items.
  rpc Verify(QueryVerifyRequest) returns (QueryVerifyResponse) {
    option (google.api.http).get =
        "/fusionchain/blackbird/verify/{policy}/{payload}";
  }

  // Queries a list of Actions items.
  rpc Actions(QueryActionsRequest) returns (QueryActionsResponse) {
    option (google.api.http).get = "/fusionchain/blackbird/actions";
  }

  // Queries a list of Policies items.
  rpc Policies(QueryPoliciesRequest) returns (QueryPoliciesResponse) {
    option (google.api.http).get = "/fusionchain/blackbird/policies";
  }

  // Queries a list of PolicyById items.
  rpc PolicyById(QueryPolicyByIdRequest) returns (QueryPolicyByIdResponse) {
    option (google.api.http).get = "/fusionchain/blackbird/policy_by_id";
  }

  // this line is used by starport scaffolding # 1
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

message QueryVerifyRequest {
  string policy = 1;
  string payload = 2;
}

message QueryVerifyResponse { bool result = 1; }

message QueryActionsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryActionsResponse {
  cosmos.base.query.v1beta1.PageResponse pagination = 1;
  repeated Action actions = 2 [ (gogoproto.nullable) = false ];
}

message QueryPoliciesRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryPoliciesResponse {
  cosmos.base.query.v1beta1.PageResponse pagination = 1;
  repeated Policy policies = 2 [ (gogoproto.nullable) = false ];
}

message QueryPolicyByIdRequest { uint64 id = 1; }

message QueryPolicyByIdResponse { Policy policy = 1; }
