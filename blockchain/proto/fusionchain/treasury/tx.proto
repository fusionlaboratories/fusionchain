syntax = "proto3";

package fusionchain.treasury;

import "fusionchain/treasury/key.proto";
import "fusionchain/treasury/wallet.proto";
import "fusionchain/treasury/mpcsign.proto";

option go_package = "github.com/qredo/fusionchain/x/treasury/types";

// Msg defines the Msg service.
service Msg {
  // Request a new key to the MPC network, the key will belong to the
  // specified workspace.
  rpc NewKeyRequest(MsgNewKeyRequest) returns (MsgNewKeyRequestResponse);

  // Update an existing request by writing a result into it. This message is
  // called by MPC network nodes.
  rpc UpdateKeyRequest(MsgUpdateKeyRequest)
      returns (MsgUpdateKeyRequestResponse);

  // Request a new signature
  rpc NewSignatureRequest(MsgNewSignatureRequest)
      returns (MsgNewSignatureRequestResponse);

  // Fulfill a signature request
  rpc FulfilSignatureRequest(MsgFulfilSignatureRequest)
      returns (MsgFulfilSignatureRequestResponse);

  // Request a new signature for a layer 1 transaction, using the specified
  // wallet.
  // The difference with NewSignatureRequest is that this message will be
  // parsed by the wallet to apply specific Blackbird policies that depends on
  // informations contained in the transaction itself (e.g. amount, recipient).
  rpc NewSignTransactionRequest(MsgNewSignTransactionRequest)
      returns (MsgNewSignTransactionRequestResponse);

  // this line is used by scaffolder # 1
}

message MsgNewKeyRequest {
  string creator = 1;
  string workspace_addr = 2;
  string keyring_addr = 3;
  KeyType key_type = 4;
  uint64 btl = 5;
}

message MsgNewKeyRequestResponse { uint64 id = 1; }

message MsgNewKey { bytes public_key = 1; }

message MsgUpdateKeyRequest {
  string creator = 1;
  uint64 request_id = 2;
  KeyRequestStatus status = 3;

  // Holds the result of the request. If status is approved, the result will
  // contain the requested key's public key that can be used for signing
  // payloads.
  // If status is rejected, the result will contain the reason.
  oneof result {
    MsgNewKey key = 4;
    string reject_reason = 5;
  }
}

message MsgUpdateKeyRequestResponse {}

message MsgNewSignatureRequest {
  string creator = 1;
  uint64 key_id = 2;
  bytes data_for_signing = 3;
  uint64 btl = 4;
}

message MsgNewSignatureRequestResponse { uint64 id = 1; }

message MsgSignedData { bytes signed_data = 1; }

message MsgFulfilSignatureRequest {
  string creator = 1;
  uint64 request_id = 2;
  SignRequestStatus status = 3;

  // Holds the result of the request. If status is approved, the result will
  // contain the signed data that was requested
  // If status is rejected, the result will contain the reason.
  oneof result {
    MsgSignedData payload = 4;
    string reject_reason = 5;
  }
}

message MsgFulfilSignatureRequestResponse {}

message MsgNewSignTransactionRequest {
  string creator = 1;
  uint64 key_id = 2;
  WalletType wallet_type = 3;
  bytes unsigned_transaction = 4;
  uint64 btl = 5;
}

message MsgNewSignTransactionRequestResponse { uint64 id = 1; }
