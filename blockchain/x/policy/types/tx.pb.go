// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fusionchain/policy/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgApproveAction struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ActionType string `protobuf:"bytes,2,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
	ActionId   uint64 `protobuf:"varint,3,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	// Optional payload input for the policy. This is "any" as it depends on the
	// type of the policy linked to the action being approved.
	PolicyPayload *types.Any `protobuf:"bytes,4,opt,name=policy_payload,json=policyPayload,proto3" json:"policy_payload,omitempty"`
}

func (m *MsgApproveAction) Reset()         { *m = MsgApproveAction{} }
func (m *MsgApproveAction) String() string { return proto.CompactTextString(m) }
func (*MsgApproveAction) ProtoMessage()    {}
func (*MsgApproveAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_e86d56aba2b053b1, []int{0}
}
func (m *MsgApproveAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgApproveAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgApproveAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgApproveAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgApproveAction.Merge(m, src)
}
func (m *MsgApproveAction) XXX_Size() int {
	return m.Size()
}
func (m *MsgApproveAction) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgApproveAction.DiscardUnknown(m)
}

var xxx_messageInfo_MsgApproveAction proto.InternalMessageInfo

func (m *MsgApproveAction) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgApproveAction) GetActionType() string {
	if m != nil {
		return m.ActionType
	}
	return ""
}

func (m *MsgApproveAction) GetActionId() uint64 {
	if m != nil {
		return m.ActionId
	}
	return 0
}

func (m *MsgApproveAction) GetPolicyPayload() *types.Any {
	if m != nil {
		return m.PolicyPayload
	}
	return nil
}

type MsgApproveActionResponse struct {
}

func (m *MsgApproveActionResponse) Reset()         { *m = MsgApproveActionResponse{} }
func (m *MsgApproveActionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgApproveActionResponse) ProtoMessage()    {}
func (*MsgApproveActionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e86d56aba2b053b1, []int{1}
}
func (m *MsgApproveActionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgApproveActionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgApproveActionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgApproveActionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgApproveActionResponse.Merge(m, src)
}
func (m *MsgApproveActionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgApproveActionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgApproveActionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgApproveActionResponse proto.InternalMessageInfo

type MsgNewPolicy struct {
	Creator string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Name    string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Policy  *types.Any `protobuf:"bytes,3,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (m *MsgNewPolicy) Reset()         { *m = MsgNewPolicy{} }
func (m *MsgNewPolicy) String() string { return proto.CompactTextString(m) }
func (*MsgNewPolicy) ProtoMessage()    {}
func (*MsgNewPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_e86d56aba2b053b1, []int{2}
}
func (m *MsgNewPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewPolicy.Merge(m, src)
}
func (m *MsgNewPolicy) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewPolicy proto.InternalMessageInfo

func (m *MsgNewPolicy) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgNewPolicy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgNewPolicy) GetPolicy() *types.Any {
	if m != nil {
		return m.Policy
	}
	return nil
}

type MsgNewPolicyResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgNewPolicyResponse) Reset()         { *m = MsgNewPolicyResponse{} }
func (m *MsgNewPolicyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgNewPolicyResponse) ProtoMessage()    {}
func (*MsgNewPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e86d56aba2b053b1, []int{3}
}
func (m *MsgNewPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewPolicyResponse.Merge(m, src)
}
func (m *MsgNewPolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewPolicyResponse proto.InternalMessageInfo

func (m *MsgNewPolicyResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgApproveAction)(nil), "fusionchain.policy.MsgApproveAction")
	proto.RegisterType((*MsgApproveActionResponse)(nil), "fusionchain.policy.MsgApproveActionResponse")
	proto.RegisterType((*MsgNewPolicy)(nil), "fusionchain.policy.MsgNewPolicy")
	proto.RegisterType((*MsgNewPolicyResponse)(nil), "fusionchain.policy.MsgNewPolicyResponse")
}

func init() { proto.RegisterFile("fusionchain/policy/tx.proto", fileDescriptor_e86d56aba2b053b1) }

var fileDescriptor_e86d56aba2b053b1 = []byte{
	// 380 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x41, 0x6b, 0xe2, 0x40,
	0x14, 0xc7, 0x1d, 0x0d, 0xee, 0xfa, 0x5c, 0x65, 0x19, 0x3c, 0x64, 0x23, 0x64, 0x43, 0x58, 0x96,
	0xc0, 0xca, 0x04, 0xdc, 0x63, 0x4f, 0x16, 0x7a, 0xe8, 0xc1, 0x22, 0xa1, 0x50, 0xe8, 0x45, 0x62,
	0x32, 0xc6, 0x29, 0x9a, 0x99, 0x26, 0xb1, 0x35, 0xdf, 0xa2, 0xdf, 0xa2, 0x1f, 0xa4, 0x97, 0x1e,
	0x3d, 0xf6, 0x58, 0xf4, 0x8b, 0x14, 0x66, 0x8c, 0xb5, 0x16, 0xdb, 0xde, 0x92, 0x79, 0xbf, 0xc9,
	0xff, 0xf7, 0x5e, 0x1e, 0xb4, 0xc7, 0xf3, 0x94, 0xf1, 0x38, 0x98, 0xf8, 0x2c, 0x76, 0x05, 0x9f,
	0xb2, 0x20, 0x77, 0xb3, 0x05, 0x11, 0x09, 0xcf, 0x38, 0xc6, 0x3b, 0x45, 0xa2, 0x8a, 0xc6, 0xaf,
	0x88, 0xf3, 0x68, 0x4a, 0x5d, 0x49, 0x8c, 0xe6, 0x63, 0xd7, 0x8f, 0x73, 0x85, 0xdb, 0xf7, 0x08,
	0x7e, 0xf6, 0xd3, 0xa8, 0x27, 0x44, 0xc2, 0x6f, 0x68, 0x2f, 0xc8, 0x18, 0x8f, 0xb1, 0x0e, 0xdf,
	0x82, 0x84, 0xfa, 0x19, 0x4f, 0x74, 0x64, 0x21, 0xa7, 0xe6, 0x15, 0xaf, 0xf8, 0x37, 0xd4, 0x7d,
	0xc9, 0x0c, 0xb3, 0x5c, 0x50, 0xbd, 0x2c, 0xab, 0xa0, 0x8e, 0xce, 0x73, 0x41, 0x71, 0x1b, 0x6a,
	0x1b, 0x80, 0x85, 0x7a, 0xc5, 0x42, 0x8e, 0xe6, 0x7d, 0x57, 0x07, 0xa7, 0x21, 0x3e, 0x82, 0xa6,
	0x32, 0x1a, 0x0a, 0x3f, 0x9f, 0x72, 0x3f, 0xd4, 0x35, 0x0b, 0x39, 0xf5, 0x6e, 0x8b, 0x28, 0x41,
	0x52, 0x08, 0x92, 0x5e, 0x9c, 0x7b, 0x0d, 0xc5, 0x0e, 0x14, 0x6a, 0x1b, 0xa0, 0xef, 0x8b, 0x7a,
	0x34, 0x15, 0x3c, 0x4e, 0xa9, 0x7d, 0x05, 0x3f, 0xfa, 0x69, 0x74, 0x46, 0x6f, 0x07, 0xf2, 0xca,
	0x07, 0x0d, 0x60, 0xd0, 0x62, 0x7f, 0x56, 0x98, 0xcb, 0x67, 0xdc, 0x81, 0xaa, 0x8a, 0x92, 0xc2,
	0x87, 0x74, 0x36, 0x8c, 0xfd, 0x17, 0x5a, 0xbb, 0x59, 0x85, 0x03, 0x6e, 0x42, 0x99, 0x85, 0x32,
	0x4e, 0xf3, 0xca, 0x2c, 0xec, 0x3e, 0x20, 0xa8, 0xf4, 0xd3, 0x08, 0x07, 0xd0, 0x78, 0x3b, 0xdd,
	0x3f, 0xe4, 0xfd, 0x2f, 0x22, 0xfb, 0xad, 0x19, 0x9d, 0xaf, 0x50, 0xdb, 0xf0, 0x0b, 0xa8, 0xbd,
	0x76, 0x6f, 0x1d, 0xb8, 0xba, 0x25, 0x0c, 0xe7, 0x33, 0xa2, 0xf8, 0xf0, 0xf1, 0xc9, 0xe3, 0xca,
	0x44, 0xcb, 0x95, 0x89, 0x9e, 0x57, 0x26, 0xba, 0x5b, 0x9b, 0xa5, 0xe5, 0xda, 0x2c, 0x3d, 0xad,
	0xcd, 0xd2, 0xe5, 0xbf, 0x88, 0x65, 0x93, 0xf9, 0x88, 0x04, 0x7c, 0xe6, 0x5e, 0x27, 0x34, 0xe4,
	0xee, 0xee, 0x5a, 0x2e, 0xb6, 0x8b, 0x99, 0x0b, 0x9a, 0x8e, 0xaa, 0x72, 0x94, 0xff, 0x5f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xe2, 0x3b, 0xeb, 0xa7, 0xbb, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Add an approval to an existing Action.
	ApproveAction(ctx context.Context, in *MsgApproveAction, opts ...grpc.CallOption) (*MsgApproveActionResponse, error)
	// TODO: document NewPolicy
	NewPolicy(ctx context.Context, in *MsgNewPolicy, opts ...grpc.CallOption) (*MsgNewPolicyResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ApproveAction(ctx context.Context, in *MsgApproveAction, opts ...grpc.CallOption) (*MsgApproveActionResponse, error) {
	out := new(MsgApproveActionResponse)
	err := c.cc.Invoke(ctx, "/fusionchain.policy.Msg/ApproveAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) NewPolicy(ctx context.Context, in *MsgNewPolicy, opts ...grpc.CallOption) (*MsgNewPolicyResponse, error) {
	out := new(MsgNewPolicyResponse)
	err := c.cc.Invoke(ctx, "/fusionchain.policy.Msg/NewPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Add an approval to an existing Action.
	ApproveAction(context.Context, *MsgApproveAction) (*MsgApproveActionResponse, error)
	// TODO: document NewPolicy
	NewPolicy(context.Context, *MsgNewPolicy) (*MsgNewPolicyResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) ApproveAction(ctx context.Context, req *MsgApproveAction) (*MsgApproveActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveAction not implemented")
}
func (*UnimplementedMsgServer) NewPolicy(ctx context.Context, req *MsgNewPolicy) (*MsgNewPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewPolicy not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_ApproveAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgApproveAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ApproveAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fusionchain.policy.Msg/ApproveAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ApproveAction(ctx, req.(*MsgApproveAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_NewPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fusionchain.policy.Msg/NewPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewPolicy(ctx, req.(*MsgNewPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fusionchain.policy.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApproveAction",
			Handler:    _Msg_ApproveAction_Handler,
		},
		{
			MethodName: "NewPolicy",
			Handler:    _Msg_NewPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fusionchain/policy/tx.proto",
}

func (m *MsgApproveAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgApproveAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgApproveAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PolicyPayload != nil {
		{
			size, err := m.PolicyPayload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ActionId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ActionId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ActionType) > 0 {
		i -= len(m.ActionType)
		copy(dAtA[i:], m.ActionType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ActionType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgApproveActionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgApproveActionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgApproveActionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgNewPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Policy != nil {
		{
			size, err := m.Policy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgNewPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgApproveAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ActionType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ActionId != 0 {
		n += 1 + sovTx(uint64(m.ActionId))
	}
	if m.PolicyPayload != nil {
		l = m.PolicyPayload.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgApproveActionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgNewPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgNewPolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgApproveAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgApproveAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgApproveAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionId", wireType)
			}
			m.ActionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PolicyPayload == nil {
				m.PolicyPayload = &types.Any{}
			}
			if err := m.PolicyPayload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgApproveActionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgApproveActionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgApproveActionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &types.Any{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
