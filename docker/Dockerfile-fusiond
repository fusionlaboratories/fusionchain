# Example usage
#
# docker build -f docker/Dockerfile --build-arg service_name=fusiond -t fusiond:0.0.1 .
# docker run -e DOCKER_ENV=true -p 8080:8080 fusiond:0.0.1

# Use a  golang alpine as the base image
FROM public.ecr.aws/docker/library/golang:1.21.0-alpine3.18 as go_builder
RUN apk update
RUN apk add make cmake git alpine-sdk linux-headers

# Setup

# Read arguments
ARG ARCH=x86_64
ARG BUILD_DATE
ARG GIT_SHA
ARG SERVICE

# Set env variables
ENV arch=$ARCH
ENV build_date=$BUILD_DATE
ENV commit_hash=$GIT_SHA
ENV service_name=$SERVICE
RUN echo "building service: ${service_name}, build date: ${build_date}, commit hash: ${commit_hash}, architecture: ${arch}"

# Add libwasmvm for musl
# Run `grep wasmvm go.mod` to find the version used in the project.
# Download checksum.txt from https://github.com/CosmWasm/wasmvm/releases to find correct checksums.
ENV WASMVM_VERSION=v1.4.0
ADD https://github.com/CosmWasm/wasmvm/releases/download/$WASMVM_VERSION/libwasmvm_muslc.aarch64.a /lib/libwasmvm_muslc.aarch64.a
ADD https://github.com/CosmWasm/wasmvm/releases/download/$WASMVM_VERSION/libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.x86_64.a
RUN sha256sum /lib/libwasmvm_muslc.aarch64.a | grep 2a72c7062e3c791792b3dab781c815c9a76083a7997ce6f9f2799aaf577f3c25
RUN sha256sum /lib/libwasmvm_muslc.x86_64.a | grep 8ea2e3b5fae83e671da2bb51115adc88591045953f509955ec38dc02ea5a7b94

RUN cp /lib/libwasmvm_muslc.${arch}.a /lib/libwasmvm_muslc.a

# Set the working directory
WORKDIR /fusionchain
COPY . .
WORKDIR /fusionchain/blockchain
ENV BUILD_TAGS=muslc LINK_STATICALLY=true

# Download dependencies
RUN go mod download

RUN --mount=type=cache,target=/root/.cache/go-build \
    --mount=type=cache,target=/go/pkg/mod \
    make build


############################################################################################################

#SSL certs
FROM alpine:3.18.0 as certs
RUN apk add --no-cache ca-certificates

# Copy binary to a scratch container. Let's keep our images nice and small!
COPY --from=go_builder /fusionchain/blockchain/build/fusiond /fusiond

# Set user
USER nobody

# Expose the port your application will run on
EXPOSE 26656
EXPOSE 26657
EXPOSE 9090

# Run the binary
ENTRYPOINT [ "/fusiond" ]
