# Example usage
#
# docker build -f docker/Dockerfile --build-arg service_name=mpc-relayer -t mpc-relayer:0.0.1 .
# docker run -e DOCKER_ENV=true -p 8080:8080 mpc-relayer:0.0.1

# Use a  golang alpine as the base image
FROM public.ecr.aws/docker/library/golang:1.21.0-alpine3.17 as go_builder
ARG arch=x86_64
RUN apk update
RUN apk add make cmake git alpine-sdk

# Setup

# Read arguments
ARG BUILD_DATE
ARG GIT_SHA
ARG SERVICE

# Set env variables
ENV build_date=$BUILD_DATE
ENV commit_hash=$GIT_SHA
ENV service_name=$SERVICE
RUN echo "building service: ${service_name}, build date: ${build_date}, commit hash: ${commit_hash}"

# Add libwasmvm for musl
# Run `grep wasmvm go.mod` to find the version used in the project.
# Download checksum.txt from https://github.com/CosmWasm/wasmvm/releases to find correct checksums.
ENV WASMVM_VERSION=v1.4.0
ADD https://github.com/CosmWasm/wasmvm/releases/download/$WASMVM_VERSION/libwasmvm_muslc.aarch64.a /lib/libwasmvm_muslc.aarch64.a
ADD https://github.com/CosmWasm/wasmvm/releases/download/$WASMVM_VERSION/libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.x86_64.a
RUN sha256sum /lib/libwasmvm_muslc.aarch64.a | grep 2a72c7062e3c791792b3dab781c815c9a76083a7997ce6f9f2799aaf577f3c25
RUN sha256sum /lib/libwasmvm_muslc.x86_64.a | grep 8ea2e3b5fae83e671da2bb51115adc88591045953f509955ec38dc02ea5a7b94

RUN cp /lib/libwasmvm_muslc.${arch}.a /lib/libwasmvm.${arch}.a

# Set the working directory
WORKDIR /fusionchain
COPY . .
WORKDIR /fusionchain/mpc-relayer

# Download dependencies
RUN go mod download


RUN GO111MODULES=on \
    GOPRIVATE=gitlab.qredo.com,github.com/qredo \
    go build \
    -ldflags "-w -linkmode external -extldflags '-static' -X 'github.com/qredo/fusionchain/mpc-relayer/pkg/common.linkedDate=${build_date}' -X 'github.com/qredo/fusionchain/mpc-relayer/pkg/common.linkedCommit=${commit_hash}'"  \
    -tags netgo \
    -o /out/service ./cmd/mpc-relayer/

# Create linux svcuser
RUN mkdir /out/etc && \
    echo "svcuser:x:1010:1010::/sbin/nologin:/bin/false" > /out/etc/passwd && \
    echo "macuser:x:501:20::/sbin/nologin:/bin/false" >> /out/etc/passwd && \
    echo "linuxuser:x:1000:1000::/sbin/nologin:/bin/false" >> /out/etc/passwd && \
    echo "root:x:0:0:root:/sbin/nologin:/bin/false" >> /out/etc/passwd && \
    echo "svcgroup:x:1010:svcuser" > /out/etc/group && \
    echo "macgroup:x:20:macuser" >> /out/etc/group && \
    echo "linuxgroup:x:1000:linuxuser" >> /out/etc/group && \
    echo "root:x:0:root" >> /out/etc/group && \
    mkdir /out/config && \
    chown -R 1010:1010 /out/config


############################################################################################################

#SSL certs
FROM alpine as certs
RUN apk add --no-cache ca-certificates

############################################################################################################


# Copy binary to a scratch container. Let's keep our images nice and small!
FROM scratch
COPY --from=go_builder /out .
COPY --from=certs /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/
# Set User
USER svcuser
# Expose the port your application will run on
EXPOSE 8080

# Run the binary
ENTRYPOINT ["/service"]

