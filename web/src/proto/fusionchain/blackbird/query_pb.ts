// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file fusionchain/blackbird/query.proto (package fusionchain.blackbird, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination_pb.js";
import { Action } from "./action_pb.js";
import { Policy } from "./policy_pb.js";

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message fusionchain.blackbird.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fusionchain.blackbird.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message fusionchain.blackbird.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: fusionchain.blackbird.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fusionchain.blackbird.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * @generated from message fusionchain.blackbird.QueryVerifyRequest
 */
export class QueryVerifyRequest extends Message<QueryVerifyRequest> {
  /**
   * @generated from field: string policy = 1;
   */
  policy = "";

  /**
   * @generated from field: string payload = 2;
   */
  payload = "";

  constructor(data?: PartialMessage<QueryVerifyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fusionchain.blackbird.QueryVerifyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "policy", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "payload", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVerifyRequest {
    return new QueryVerifyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVerifyRequest {
    return new QueryVerifyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVerifyRequest {
    return new QueryVerifyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVerifyRequest | PlainMessage<QueryVerifyRequest> | undefined, b: QueryVerifyRequest | PlainMessage<QueryVerifyRequest> | undefined): boolean {
    return proto3.util.equals(QueryVerifyRequest, a, b);
  }
}

/**
 * @generated from message fusionchain.blackbird.QueryVerifyResponse
 */
export class QueryVerifyResponse extends Message<QueryVerifyResponse> {
  /**
   * @generated from field: bool result = 1;
   */
  result = false;

  constructor(data?: PartialMessage<QueryVerifyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fusionchain.blackbird.QueryVerifyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVerifyResponse {
    return new QueryVerifyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVerifyResponse {
    return new QueryVerifyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVerifyResponse {
    return new QueryVerifyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVerifyResponse | PlainMessage<QueryVerifyResponse> | undefined, b: QueryVerifyResponse | PlainMessage<QueryVerifyResponse> | undefined): boolean {
    return proto3.util.equals(QueryVerifyResponse, a, b);
  }
}

/**
 * @generated from message fusionchain.blackbird.QueryActionsRequest
 */
export class QueryActionsRequest extends Message<QueryActionsRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryActionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fusionchain.blackbird.QueryActionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryActionsRequest {
    return new QueryActionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryActionsRequest {
    return new QueryActionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryActionsRequest {
    return new QueryActionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryActionsRequest | PlainMessage<QueryActionsRequest> | undefined, b: QueryActionsRequest | PlainMessage<QueryActionsRequest> | undefined): boolean {
    return proto3.util.equals(QueryActionsRequest, a, b);
  }
}

/**
 * @generated from message fusionchain.blackbird.QueryActionsResponse
 */
export class QueryActionsResponse extends Message<QueryActionsResponse> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 1;
   */
  pagination?: PageResponse;

  /**
   * @generated from field: repeated fusionchain.blackbird.Action actions = 2;
   */
  actions: Action[] = [];

  constructor(data?: PartialMessage<QueryActionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fusionchain.blackbird.QueryActionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageResponse },
    { no: 2, name: "actions", kind: "message", T: Action, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryActionsResponse {
    return new QueryActionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryActionsResponse {
    return new QueryActionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryActionsResponse {
    return new QueryActionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryActionsResponse | PlainMessage<QueryActionsResponse> | undefined, b: QueryActionsResponse | PlainMessage<QueryActionsResponse> | undefined): boolean {
    return proto3.util.equals(QueryActionsResponse, a, b);
  }
}

/**
 * @generated from message fusionchain.blackbird.QueryPoliciesRequest
 */
export class QueryPoliciesRequest extends Message<QueryPoliciesRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryPoliciesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fusionchain.blackbird.QueryPoliciesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoliciesRequest {
    return new QueryPoliciesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoliciesRequest {
    return new QueryPoliciesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoliciesRequest {
    return new QueryPoliciesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoliciesRequest | PlainMessage<QueryPoliciesRequest> | undefined, b: QueryPoliciesRequest | PlainMessage<QueryPoliciesRequest> | undefined): boolean {
    return proto3.util.equals(QueryPoliciesRequest, a, b);
  }
}

/**
 * @generated from message fusionchain.blackbird.QueryPoliciesResponse
 */
export class QueryPoliciesResponse extends Message<QueryPoliciesResponse> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 1;
   */
  pagination?: PageResponse;

  /**
   * @generated from field: repeated fusionchain.blackbird.Policy policies = 2;
   */
  policies: Policy[] = [];

  constructor(data?: PartialMessage<QueryPoliciesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fusionchain.blackbird.QueryPoliciesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageResponse },
    { no: 2, name: "policies", kind: "message", T: Policy, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoliciesResponse {
    return new QueryPoliciesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoliciesResponse {
    return new QueryPoliciesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoliciesResponse {
    return new QueryPoliciesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoliciesResponse | PlainMessage<QueryPoliciesResponse> | undefined, b: QueryPoliciesResponse | PlainMessage<QueryPoliciesResponse> | undefined): boolean {
    return proto3.util.equals(QueryPoliciesResponse, a, b);
  }
}

/**
 * @generated from message fusionchain.blackbird.QueryPolicyByIdRequest
 */
export class QueryPolicyByIdRequest extends Message<QueryPolicyByIdRequest> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<QueryPolicyByIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fusionchain.blackbird.QueryPolicyByIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPolicyByIdRequest {
    return new QueryPolicyByIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPolicyByIdRequest {
    return new QueryPolicyByIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPolicyByIdRequest {
    return new QueryPolicyByIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPolicyByIdRequest | PlainMessage<QueryPolicyByIdRequest> | undefined, b: QueryPolicyByIdRequest | PlainMessage<QueryPolicyByIdRequest> | undefined): boolean {
    return proto3.util.equals(QueryPolicyByIdRequest, a, b);
  }
}

/**
 * @generated from message fusionchain.blackbird.QueryPolicyByIdResponse
 */
export class QueryPolicyByIdResponse extends Message<QueryPolicyByIdResponse> {
  /**
   * @generated from field: fusionchain.blackbird.Policy policy = 1;
   */
  policy?: Policy;

  constructor(data?: PartialMessage<QueryPolicyByIdResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fusionchain.blackbird.QueryPolicyByIdResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "policy", kind: "message", T: Policy },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPolicyByIdResponse {
    return new QueryPolicyByIdResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPolicyByIdResponse {
    return new QueryPolicyByIdResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPolicyByIdResponse {
    return new QueryPolicyByIdResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPolicyByIdResponse | PlainMessage<QueryPolicyByIdResponse> | undefined, b: QueryPolicyByIdResponse | PlainMessage<QueryPolicyByIdResponse> | undefined): boolean {
    return proto3.util.equals(QueryPolicyByIdResponse, a, b);
  }
}

