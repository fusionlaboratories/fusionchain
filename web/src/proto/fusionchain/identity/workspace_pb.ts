// @generated by protoc-gen-es v1.3.3 with parameter "target=ts"
// @generated from file fusionchain/identity/workspace.proto (package fusionchain.identity, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message fusionchain.identity.Workspace
 */
export class Workspace extends Message<Workspace> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: string creator = 2;
   */
  creator = "";

  /**
   * @generated from field: repeated string owners = 3;
   */
  owners: string[] = [];

  /**
   * @generated from field: repeated string child_workspaces = 4;
   */
  childWorkspaces: string[] = [];

  /**
   * Optional ID of the policy to be applied to every *admin* operation.
   * If not specified, the default policy is used.
   *
   * Admin operations are:
   * - fusionchain.identity.Msg.AddWorkspaceOwner
   * - fusionchain.identity.Msg.RemoveWorkspaceOwner
   * - fusionchain.identity.Msg.AppendChildWorkspace
   * - fusionchain.identity.Msg.NewChildWorkspace
   *
   * The default policy is to allow any operation when at least one of its
   * owner approves it.
   *
   * @generated from field: uint64 admin_policy_id = 5;
   */
  adminPolicyId = protoInt64.zero;

  /**
   * Optional ID of the policy to be applied to every *sign* operation.
   * If not specified, the default policy is used.
   *
   * Sign operations are:
   * - fusionchain.treasury.Msg.NewKeyRequest
   * - fusionchain.treasury.Msg.NewSignatureRequest
   * - fusionchain.treasury.Msg.NewWalletRequest
   * - fusionchain.treasury.Msg.NewSignTransactionRequest
   *
   * The default policy is to allow any operation when at least one of its
   * owner approves it.
   *
   * @generated from field: uint64 sign_policy_id = 6;
   */
  signPolicyId = protoInt64.zero;

  constructor(data?: PartialMessage<Workspace>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fusionchain.identity.Workspace";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "owners", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "child_workspaces", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "admin_policy_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "sign_policy_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Workspace {
    return new Workspace().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Workspace {
    return new Workspace().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Workspace {
    return new Workspace().fromJsonString(jsonString, options);
  }

  static equals(a: Workspace | PlainMessage<Workspace> | undefined, b: Workspace | PlainMessage<Workspace> | undefined): boolean {
    return proto3.util.equals(Workspace, a, b);
  }
}

