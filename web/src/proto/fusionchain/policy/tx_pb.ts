// @generated by protoc-gen-es v1.3.3 with parameter "target=ts"
// @generated from file fusionchain/policy/tx.proto (package fusionchain.policy, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message fusionchain.policy.MsgApproveAction
 */
export class MsgApproveAction extends Message<MsgApproveAction> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string action_type = 2;
   */
  actionType = "";

  /**
   * @generated from field: uint64 action_id = 3;
   */
  actionId = protoInt64.zero;

  /**
   * Optional payload input for the policy. This is "any" as it depends on the
   * type of the policy linked to the action being approved.
   *
   * @generated from field: google.protobuf.Any policy_payload = 4;
   */
  policyPayload?: Any;

  constructor(data?: PartialMessage<MsgApproveAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fusionchain.policy.MsgApproveAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "action_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "action_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "policy_payload", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgApproveAction {
    return new MsgApproveAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgApproveAction {
    return new MsgApproveAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgApproveAction {
    return new MsgApproveAction().fromJsonString(jsonString, options);
  }

  static equals(a: MsgApproveAction | PlainMessage<MsgApproveAction> | undefined, b: MsgApproveAction | PlainMessage<MsgApproveAction> | undefined): boolean {
    return proto3.util.equals(MsgApproveAction, a, b);
  }
}

/**
 * @generated from message fusionchain.policy.MsgApproveActionResponse
 */
export class MsgApproveActionResponse extends Message<MsgApproveActionResponse> {
  /**
   * @generated from field: string status = 1;
   */
  status = "";

  constructor(data?: PartialMessage<MsgApproveActionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fusionchain.policy.MsgApproveActionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgApproveActionResponse {
    return new MsgApproveActionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgApproveActionResponse {
    return new MsgApproveActionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgApproveActionResponse {
    return new MsgApproveActionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgApproveActionResponse | PlainMessage<MsgApproveActionResponse> | undefined, b: MsgApproveActionResponse | PlainMessage<MsgApproveActionResponse> | undefined): boolean {
    return proto3.util.equals(MsgApproveActionResponse, a, b);
  }
}

/**
 * @generated from message fusionchain.policy.MsgNewPolicy
 */
export class MsgNewPolicy extends Message<MsgNewPolicy> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: google.protobuf.Any policy = 3;
   */
  policy?: Any;

  constructor(data?: PartialMessage<MsgNewPolicy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fusionchain.policy.MsgNewPolicy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "policy", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgNewPolicy {
    return new MsgNewPolicy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgNewPolicy {
    return new MsgNewPolicy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgNewPolicy {
    return new MsgNewPolicy().fromJsonString(jsonString, options);
  }

  static equals(a: MsgNewPolicy | PlainMessage<MsgNewPolicy> | undefined, b: MsgNewPolicy | PlainMessage<MsgNewPolicy> | undefined): boolean {
    return proto3.util.equals(MsgNewPolicy, a, b);
  }
}

/**
 * @generated from message fusionchain.policy.MsgNewPolicyResponse
 */
export class MsgNewPolicyResponse extends Message<MsgNewPolicyResponse> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<MsgNewPolicyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fusionchain.policy.MsgNewPolicyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgNewPolicyResponse {
    return new MsgNewPolicyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgNewPolicyResponse {
    return new MsgNewPolicyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgNewPolicyResponse {
    return new MsgNewPolicyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgNewPolicyResponse | PlainMessage<MsgNewPolicyResponse> | undefined, b: MsgNewPolicyResponse | PlainMessage<MsgNewPolicyResponse> | undefined): boolean {
    return proto3.util.equals(MsgNewPolicyResponse, a, b);
  }
}

/**
 * @generated from message fusionchain.policy.MsgRevokeAction
 */
export class MsgRevokeAction extends Message<MsgRevokeAction> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string action_type = 2;
   */
  actionType = "";

  /**
   * @generated from field: uint64 action_id = 3;
   */
  actionId = protoInt64.zero;

  constructor(data?: PartialMessage<MsgRevokeAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fusionchain.policy.MsgRevokeAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "action_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "action_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRevokeAction {
    return new MsgRevokeAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRevokeAction {
    return new MsgRevokeAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRevokeAction {
    return new MsgRevokeAction().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRevokeAction | PlainMessage<MsgRevokeAction> | undefined, b: MsgRevokeAction | PlainMessage<MsgRevokeAction> | undefined): boolean {
    return proto3.util.equals(MsgRevokeAction, a, b);
  }
}

/**
 * @generated from message fusionchain.policy.MsgRevokeActionResponse
 */
export class MsgRevokeActionResponse extends Message<MsgRevokeActionResponse> {
  constructor(data?: PartialMessage<MsgRevokeActionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fusionchain.policy.MsgRevokeActionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRevokeActionResponse {
    return new MsgRevokeActionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRevokeActionResponse {
    return new MsgRevokeActionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRevokeActionResponse {
    return new MsgRevokeActionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRevokeActionResponse | PlainMessage<MsgRevokeActionResponse> | undefined, b: MsgRevokeActionResponse | PlainMessage<MsgRevokeActionResponse> | undefined): boolean {
    return proto3.util.equals(MsgRevokeActionResponse, a, b);
  }
}

