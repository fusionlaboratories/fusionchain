// @generated by protoc-gen-es v1.4.0 with parameter "target=ts"
// @generated from file fusionchain/treasury/key.proto (package fusionchain.treasury, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * KeyRequestStatus indicates the status of a key request.
 * A request starts as "pending", waiting to be picked up. Then it can move to
 * either "approved" or "rejected", depending on the decision of the MPC nodes.
 *
 * @generated from enum fusionchain.treasury.KeyRequestStatus
 */
export enum KeyRequestStatus {
  /**
   * The request is missing the status field.
   *
   * @generated from enum value: KEY_REQUEST_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The request is waiting to be fulfilled. This is the initial state of a
   * request.
   *
   * @generated from enum value: KEY_REQUEST_STATUS_PENDING = 1;
   */
  PENDING = 1,

  /**
   * The request was fulfilled. This is a final state for a request.
   *
   * @generated from enum value: KEY_REQUEST_STATUS_FULFILLED = 2;
   */
  FULFILLED = 2,

  /**
   * The request was rejected. This is a final state for a request.
   *
   * @generated from enum value: KEY_REQUEST_STATUS_REJECTED = 3;
   */
  REJECTED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(KeyRequestStatus)
proto3.util.setEnumType(KeyRequestStatus, "fusionchain.treasury.KeyRequestStatus", [
  { no: 0, name: "KEY_REQUEST_STATUS_UNSPECIFIED" },
  { no: 1, name: "KEY_REQUEST_STATUS_PENDING" },
  { no: 2, name: "KEY_REQUEST_STATUS_FULFILLED" },
  { no: 3, name: "KEY_REQUEST_STATUS_REJECTED" },
]);

/**
 * KeyType indicates what crypto scheme will be used by this key (e.g.
 * ECDSA). Its public key will be one of the specified type.
 *
 * @generated from enum fusionchain.treasury.KeyType
 */
export enum KeyType {
  /**
   * The key type is missing.
   *
   * @generated from enum value: KEY_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The key is an ECDSA secp256k1 key.
   *
   * @generated from enum value: KEY_TYPE_ECDSA_SECP256K1 = 1;
   */
  ECDSA_SECP256K1 = 1,

  /**
   * The key is an EdDSA Ed25519 key.
   *
   * @generated from enum value: KEY_TYPE_EDDSA_ED25519 = 2;
   */
  EDDSA_ED25519 = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(KeyType)
proto3.util.setEnumType(KeyType, "fusionchain.treasury.KeyType", [
  { no: 0, name: "KEY_TYPE_UNSPECIFIED" },
  { no: 1, name: "KEY_TYPE_ECDSA_SECP256K1" },
  { no: 2, name: "KEY_TYPE_EDDSA_ED25519" },
]);

/**
 * @generated from message fusionchain.treasury.KeyRequest
 */
export class KeyRequest extends Message<KeyRequest> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string creator = 2;
   */
  creator = "";

  /**
   * @generated from field: string workspace_addr = 3;
   */
  workspaceAddr = "";

  /**
   * @generated from field: string keyring_addr = 4;
   */
  keyringAddr = "";

  /**
   * @generated from field: fusionchain.treasury.KeyType key_type = 5;
   */
  keyType = KeyType.UNSPECIFIED;

  /**
   * @generated from field: fusionchain.treasury.KeyRequestStatus status = 6;
   */
  status = KeyRequestStatus.UNSPECIFIED;

  /**
   * @generated from field: string reject_reason = 7;
   */
  rejectReason = "";

  constructor(data?: PartialMessage<KeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fusionchain.treasury.KeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "workspace_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "keyring_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "key_type", kind: "enum", T: proto3.getEnumType(KeyType) },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(KeyRequestStatus) },
    { no: 7, name: "reject_reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KeyRequest {
    return new KeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KeyRequest {
    return new KeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KeyRequest {
    return new KeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: KeyRequest | PlainMessage<KeyRequest> | undefined, b: KeyRequest | PlainMessage<KeyRequest> | undefined): boolean {
    return proto3.util.equals(KeyRequest, a, b);
  }
}

/**
 * @generated from message fusionchain.treasury.Key
 */
export class Key extends Message<Key> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string workspace_addr = 2;
   */
  workspaceAddr = "";

  /**
   * @generated from field: string keyring_addr = 3;
   */
  keyringAddr = "";

  /**
   * @generated from field: fusionchain.treasury.KeyType type = 4;
   */
  type = KeyType.UNSPECIFIED;

  /**
   * @generated from field: bytes public_key = 5;
   */
  publicKey = new Uint8Array(0);

  constructor(data?: PartialMessage<Key>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fusionchain.treasury.Key";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "workspace_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "keyring_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "type", kind: "enum", T: proto3.getEnumType(KeyType) },
    { no: 5, name: "public_key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Key {
    return new Key().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Key {
    return new Key().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Key {
    return new Key().fromJsonString(jsonString, options);
  }

  static equals(a: Key | PlainMessage<Key> | undefined, b: Key | PlainMessage<Key> | undefined): boolean {
    return proto3.util.equals(Key, a, b);
  }
}

