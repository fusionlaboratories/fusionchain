// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file fusionchain/treasury/mpcsign.proto (package fusionchain.treasury, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { KeyType } from "./key_pb.js";
import { WalletType } from "./wallet_pb.js";

/**
 * SignRequestStatus indicates the status of an MPC signature request.
 * A request starts as "pending", waiting to be picked up. Then it can move to
 * either "approved" or "rejected", depending on the decision of the MPC nodes.
 *
 * @generated from enum fusionchain.treasury.SignRequestStatus
 */
export enum SignRequestStatus {
  /**
   * The request is missing the status field.
   *
   * @generated from enum value: SIGN_REQUEST_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The request is waiting to be fulfilled. This is the initial state of a
   * request.
   *
   * @generated from enum value: SIGN_REQUEST_STATUS_PENDING = 1;
   */
  PENDING = 1,

  /**
   * The request was fulfilled. This is a final state for a request.
   *
   * @generated from enum value: SIGN_REQUEST_STATUS_FULFILLED = 2;
   */
  FULFILLED = 2,

  /**
   * The request was rejected. This is a final state for a request.
   *
   * @generated from enum value: SIGN_REQUEST_STATUS_REJECTED = 3;
   */
  REJECTED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(SignRequestStatus)
proto3.util.setEnumType(SignRequestStatus, "fusionchain.treasury.SignRequestStatus", [
  { no: 0, name: "SIGN_REQUEST_STATUS_UNSPECIFIED" },
  { no: 1, name: "SIGN_REQUEST_STATUS_PENDING" },
  { no: 2, name: "SIGN_REQUEST_STATUS_FULFILLED" },
  { no: 3, name: "SIGN_REQUEST_STATUS_REJECTED" },
]);

/**
 * @generated from message fusionchain.treasury.SignRequest
 */
export class SignRequest extends Message<SignRequest> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string creator = 2;
   */
  creator = "";

  /**
   * @generated from field: uint64 key_id = 3;
   */
  keyId = protoInt64.zero;

  /**
   * @generated from field: bytes data_for_signing = 4;
   */
  dataForSigning = new Uint8Array(0);

  /**
   * @generated from field: fusionchain.treasury.SignRequestStatus status = 5;
   */
  status = SignRequestStatus.UNSPECIFIED;

  /**
   * @generated from field: fusionchain.treasury.KeyType key_type = 8;
   */
  keyType = KeyType.UNSPECIFIED;

  /**
   * Holds the result of the request. If status is pending no result is
   * available yet. If status is approved, the response will contain the signed
   * payload id. If status is rejected, the result will contain the reason for
   * the rejection.
   *
   * @generated from oneof fusionchain.treasury.SignRequest.result
   */
  result: {
    /**
     * @generated from field: bytes signed_data = 6;
     */
    value: Uint8Array;
    case: "signedData";
  } | {
    /**
     * @generated from field: string reject_reason = 7;
     */
    value: string;
    case: "rejectReason";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SignRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fusionchain.treasury.SignRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "key_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "data_for_signing", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "status", kind: "enum", T: proto3.getEnumType(SignRequestStatus) },
    { no: 8, name: "key_type", kind: "enum", T: proto3.getEnumType(KeyType) },
    { no: 6, name: "signed_data", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "result" },
    { no: 7, name: "reject_reason", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "result" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignRequest {
    return new SignRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignRequest {
    return new SignRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignRequest {
    return new SignRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SignRequest | PlainMessage<SignRequest> | undefined, b: SignRequest | PlainMessage<SignRequest> | undefined): boolean {
    return proto3.util.equals(SignRequest, a, b);
  }
}

/**
 * @generated from message fusionchain.treasury.SignTransactionRequest
 */
export class SignTransactionRequest extends Message<SignTransactionRequest> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string creator = 2;
   */
  creator = "";

  /**
   * @generated from field: uint64 key_id = 3;
   */
  keyId = protoInt64.zero;

  /**
   * @generated from field: fusionchain.treasury.WalletType wallet_type = 4;
   */
  walletType = WalletType.UNSPECIFIED;

  /**
   * @generated from field: bytes unsigned_transaction = 5;
   */
  unsignedTransaction = new Uint8Array(0);

  /**
   * @generated from field: uint64 sign_request_id = 6;
   */
  signRequestId = protoInt64.zero;

  constructor(data?: PartialMessage<SignTransactionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fusionchain.treasury.SignTransactionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "key_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "wallet_type", kind: "enum", T: proto3.getEnumType(WalletType) },
    { no: 5, name: "unsigned_transaction", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "sign_request_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignTransactionRequest {
    return new SignTransactionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignTransactionRequest {
    return new SignTransactionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignTransactionRequest {
    return new SignTransactionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SignTransactionRequest | PlainMessage<SignTransactionRequest> | undefined, b: SignTransactionRequest | PlainMessage<SignTransactionRequest> | undefined): boolean {
    return proto3.util.equals(SignTransactionRequest, a, b);
  }
}

